import { useState } from "react";
import { getSupabaseClient, useSupabaseConfig } from "@focus-locus/core";

export default function AuthDebug() {
  const [testResult, setTestResult] = useState("");
  const [loading, setLoading] = useState(false);
  const supabaseConfig = useSupabaseConfig();
  const supabase = getSupabaseClient(supabaseConfig);

  const testSupabaseConnection = async () => {
    setLoading(true);
    setTestResult("Probando conexi√≥n...");

    try {
      // Probar configuraci√≥n
      if (!supabase) {
        setTestResult("‚ùå Supabase no est√° configurado correctamente");
        setLoading(false);
        return;
      }

      // Probar conexi√≥n b√°sica
      const { data, error } = await supabase.auth.getSession();

      if (error) {
        setTestResult(`‚ùå Error al conectar con Supabase: ${error.message}`);
      } else {
        setTestResult(
          `‚úÖ Conexi√≥n exitosa. Sesi√≥n actual: ${
            data.session ? "Autenticado" : "No autenticado"
          }`
        );
      }
    } catch (error) {
      setTestResult(`‚ùå Error de conexi√≥n: ${error.message}`);
    }

    setLoading(false);
  };

  const testEmailSignIn = async () => {
    setLoading(true);
    setTestResult("Probando inicio de sesi√≥n...");

    try {
      // Usar credenciales de prueba conocidas
      const testEmail = "test@focuslocus.app";
      const testPassword = "testpassword123";

      console.log("üß™ Probando login con:", { email: testEmail });

      const { data, error } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: testPassword,
      });

      if (error) {
        console.error("‚ùå Error en login:", error);

        let errorMsg = error.message;
        if (error.message.includes("Invalid login credentials")) {
          errorMsg =
            "‚ùå Credenciales inv√°lidas. ¬øEl usuario existe y est√° confirmado?";
        } else if (error.message.includes("Email not confirmed")) {
          errorMsg =
            "‚ùå Email no confirmado. Deshabilita email confirmations en Supabase.";
        }

        setTestResult(
          `${errorMsg}\n\nüí° Prueba crear el usuario de prueba primero.`
        );
      } else {
        console.log("‚úÖ Login exitoso:", data);
        setTestResult(
          `‚úÖ Login exitoso! Usuario: ${
            data.user?.email || "Email no disponible"
          }\nüéâ ¬°Autenticaci√≥n funcionando correctamente!`
        );
      }
    } catch (error) {
      console.error("‚ùå Error de login:", error);
      setTestResult(`‚ùå Error de login: ${error.message}`);
    }

    setLoading(false);
  };

  const createTestUser = async () => {
    setLoading(true);
    setTestResult("Creando usuario de prueba conocido...");

    try {
      const testEmail = "test@focuslocus.app";
      const testPassword = "testpassword123";

      console.log("üß™ Creando usuario de prueba:", { email: testEmail });

      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
      });

      if (error) {
        console.error("‚ùå Error creando usuario:", error);

        if (error.message.includes("User already registered")) {
          setTestResult(
            `‚úÖ Usuario ya existe. Puedes usar:\nüìß Email: ${testEmail}\nüîê Password: ${testPassword}`
          );
        } else {
          setTestResult(`‚ùå Error: ${error.message}`);
        }
      } else {
        console.log("‚úÖ Usuario creado:", data);
        setTestResult(
          `‚úÖ Usuario de prueba creado!\nüìß Email: ${testEmail}\nüîê Password: ${testPassword}\n\n${
            data.session
              ? "üéâ Ya autenticado!"
              : "‚ö†Ô∏è Confirma email si es necesario"
          }`
        );
      }
    } catch (error) {
      console.error("‚ùå Error:", error);
      setTestResult(`‚ùå Error: ${error.message}`);
    }

    setLoading(false);
  };

  const testEmailSignUp = async () => {
    setLoading(true);
    setTestResult("Probando registro de usuario...");

    try {
      // Usar un email √∫nico para evitar conflictos
      const testEmail = `test${Date.now()}@example.com`;
      const testPassword = "password123";

      console.log("üß™ Probando registro con:", { email: testEmail });

      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
      });

      if (error) {
        console.error("‚ùå Error en registro:", error);

        // Mensaje espec√≠fico seg√∫n el tipo de error
        let errorMsg = error.message;
        if (error.message.includes("User already registered")) {
          errorMsg =
            "‚ùå Usuario ya registrado. Intenta con otro email o usa login.";
        } else if (error.message.includes("Email not confirmed")) {
          errorMsg = "‚ùå Email no confirmado. Verifica tu bandeja de entrada.";
        }

        setTestResult(errorMsg);
      } else {
        console.log("‚úÖ Registro exitoso:", data);

        let successMsg = `‚úÖ Registro exitoso! Usuario: ${
          data.user?.email || "Email no disponible"
        }`;

        // Verificar si necesita confirmaci√≥n de email
        if (data.user && !data.session) {
          successMsg +=
            "\n‚ö†Ô∏è Necesitas confirmar tu email antes de hacer login.";
        } else if (data.session) {
          successMsg += "\nüéâ ¬°Ya est√°s autenticado autom√°ticamente!";
        }

        setTestResult(successMsg);
      }
    } catch (error) {
      console.error("‚ùå Error de registro:", error);
      setTestResult(`‚ùå Error de registro: ${error.message}`);
    }

    setLoading(false);
  };

  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-xl font-bold mb-4">Debug de Autenticaci√≥n</h2>

      <div className="space-y-4">
        <button
          onClick={testSupabaseConnection}
          disabled={loading}
          className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:opacity-50"
        >
          Probar Conexi√≥n
        </button>

        <button
          onClick={createTestUser}
          disabled={loading}
          className="w-full bg-yellow-500 text-white py-2 px-4 rounded hover:bg-yellow-600 disabled:opacity-50"
        >
          Crear Usuario de Prueba
        </button>

        <button
          onClick={testEmailSignUp}
          disabled={loading}
          className="w-full bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 disabled:opacity-50"
        >
          Probar Registro (Random)
        </button>

        <button
          onClick={testEmailSignIn}
          disabled={loading}
          className="w-full bg-purple-500 text-white py-2 px-4 rounded hover:bg-purple-600 disabled:opacity-50"
        >
          Probar Login
        </button>

        <div className="mt-4">
          <h3 className="font-semibold mb-2">Variables de entorno:</h3>
          <div className="text-sm bg-gray-100 p-2 rounded">
            <p>
              URL:{" "}
              {import.meta.env.VITE_SUPABASE_URL
                ? "‚úÖ Configurada"
                : "‚ùå No configurada"}
            </p>
            <p>
              Key:{" "}
              {import.meta.env.VITE_SUPABASE_ANON_KEY
                ? "‚úÖ Configurada"
                : "‚ùå No configurada"}
            </p>
          </div>
        </div>

        {testResult && (
          <div className="mt-4 p-3 bg-gray-50 rounded border">
            <h3 className="font-semibold mb-2">Resultado:</h3>
            <pre className="text-sm whitespace-pre-wrap">{testResult}</pre>
          </div>
        )}
      </div>
    </div>
  );
}
